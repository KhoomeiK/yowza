{"version":3,"sources":["components/navbar.js","layouts/main.js","components/post.js","components/error.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["navStyle","borderBottom","padding","position","top","width","backgroundColor","titleStyle","display","margin","color","cursor","Navbar","react_default","a","createElement","style","href","contentStyle","paddingTop","MainLayout","_ref","children","Post","props","title","content","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","s","value","split","f","shift","toString","push","err","return","eachComment","Error","message","Index","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasMore","used","posts","loading","window","onscroll","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","innerHeight","document","documentElement","scrollTop","offsetHeight","setState","loadMoreData","stop","bind","assertThisInitialized","id","axios","get","data","newPosts","post","map","previousState","concat","length","key","Component","App","className","pages_Index","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.759efd04.chunk.js","sourcesContent":["import React from 'react';\n\nconst navStyle = {\n  borderBottom: '1px solid #e1e4e8',\n  padding: '1em',\n  position: 'fixed',\n  top: '0',\n  width: '100%',\n  backgroundColor: 'white'\n};\n\nconst titleStyle = {\n  display: 'inline-block',\n  margin: 0,\n  color: 'red',\n  cursor: 'pointer'\n};\n\nexport default function Navbar () {\n  return (\n    <nav style={navStyle}>\n      <a href='/'>\n        <h1 style={titleStyle}>Yowza!</h1>\n      </a>\n    </nav>\n  );\n}\n","import React from 'react';\n\nimport Navbar from '../components/navbar';\n\nconst contentStyle = {\n  padding: '0.5em 1em',\n  paddingTop: '3em'\n};\n\nexport default function MainLayout ({ children }) {\n  return (\n    <div>\n      <Navbar />\n      <div style={contentStyle}>\n        { children }\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nfunction eachComment(content) {\n  let arr = []\n  for (let i of content) {\n    let s = i.split('.');\n    let f = s[0];\n    s.shift();\n    s = s.toString();\n    arr.push(<p><b>{f}</b>{s}</p>);\n  }\n  return arr;\n}\n\nexport default function Post(props) {\n  return (\n    <div>\n      <h1>\n        {props.title}\n      </h1>\n      <div>\n        {eachComment(props.content)}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Error (props) {\n  return (\n    <p>Error: {props.message}</p>\n  );\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Page from '../layouts/main';\n\nimport Post from '../components/post';\nimport Error from '../components/error';\n\n\n/**\n * The way this works is:\n * - First load (Server Rendering) saves everything to props\n *  (so that it doesn't have to derive state from props)\n * - Any other load after that saves to state\n */\n\n/**\n * 1. Send request to API with a list of IDs that it has loaded so far\n * - Server pulls random post from DB\n * - if post id is in array, pull next random post\n * - if post id is not in array, serve this post\n * 2. Server responds with a key/value pair of Ids/Posts\n * 3. SetState to keep track of all the IDs that were loaded.\n * 4. Repeat on Scroll\n */\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasMore: true,\n      used: [],\n      posts: [],\n      loading: false\n    };\n\n    window.onscroll = async () => {\n      if (\n        window.innerHeight + document.documentElement.scrollTop\n        >= document.documentElement.offsetHeight - 150 &&\n        !this.state.loading\n      ) {\n        this.setState({ loading: true });\n        await this.loadMoreData();\n        this.setState({ loading: false });\n      }\n    }\n\n    this.loadMoreData = this.loadMoreData.bind(this);\n  }\n\n  async componentWillMount() {\n    const id = 'b4jn8z';\n    await this.loadMoreData(id);\n  }\n\n  // This loads data from the API and sets it to the state (using this.loadData)\n  async loadMoreData(id) {\n    let newPosts;\n    if (id) {\n      const { data } = await axios.get('http://35.247.79.142/api/' + id);\n      newPosts = { id: data[0], title: data[1], content: data[2] }\n    } else {\n      const { data } = await axios.post('http://35.247.79.142/api', { 'used': this.state.posts.map(post => post.id) });\n      newPosts = { id: data[0], title: data[1], content: data[2] }\n    }\n\n    /**\n     * 1. Fetch data from API\n     * 2. Set State with new posts list (merge/push them to the current posts list)\n     * 3. Also SetState with whether or not it hasMore posts to load (if new posts list is empty, false)\n     * 4. This causes a re-render\n     */\n\n    // TODO: Pass Object.keys(posts) (to pass currently loaded posts)\n    // Load data from the API\n    this.setState(previousState => ({\n      // Merge current and new posts\n      posts: previousState.posts.concat(newPosts),\n      // Update whether or not it has more posts\n      hasMore: newPosts.length !== 0\n    }));\n  }\n\n  render() {\n    // Merge props and state to render it\n    const data = this.state.posts;\n    return (\n      <Page>\n        {\n          data && data.length > 0\n            ? (<div id='posts'>\n              {\n                data.map((post) => (\n                  <Post title={post.title} content={post.content} key={post.id} />\n                ))\n              }\n            </div>)\n            : <Error message='Could not load posts, please try again.' />\n        }\n      </Page>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport Home from './pages/index';\n\nclass App extends Component {\n  render () {\n    return (\n      <div className='App'>\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}