{"version":3,"sources":["components/navbar.js","layouts/main.js","components/comment.js","components/post.js","components/error.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["navStyle","borderBottom","padding","position","top","width","backgroundColor","titleStyle","display","margin","color","cursor","Navbar","react_default","a","createElement","style","href","contentStyle","paddingTop","MainLayout","_ref","children","commentStyle","marginBottom","fontSize","fontWeight","marginTop","Comment","props","index","title","react_markdown_default","source","content","skipHtml","postStyle","lineHeight","Post","map","processComment","value","key","replace","trim","splitContent","split","raw","charAt","toUpperCase","slice","substring","range","Error","message","Index","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasMore","used","posts","loading","window","onscroll","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","innerHeight","document","documentElement","scrollTop","offsetHeight","setState","loadMoreData","stop","bind","assertThisInitialized","id","axios","get","data","newPosts","post","previousState","concat","length","_this$state","processTitle","Component","rawTitle","regexp","matches","exec","finalTitle","toLowerCase","App","className","pages_Index","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b4e1a9d.chunk.js","sourcesContent":["import React from 'react';\n\nconst navStyle = {\n  borderBottom: '1px solid #e1e4e8',\n  padding: '1em',\n  position: 'fixed',\n  top: '0',\n  width: '100%',\n  backgroundColor: 'white'\n};\n\nconst titleStyle = {\n  display: 'inline-block',\n  margin: 0,\n  color: 'red',\n  cursor: 'pointer'\n};\n\nexport default function Navbar () {\n  return (\n    <nav style={navStyle}>\n      <a href='/'>\n        <h1 style={titleStyle}>Yowza!</h1>\n      </a>\n    </nav>\n  );\n}\n","import React from 'react';\n\nimport Navbar from '../components/navbar';\n\nconst contentStyle = {\n  padding: '0.5em 1em',\n  paddingTop: '3em'\n};\n\nexport default function MainLayout ({ children }) {\n  return (\n    <div>\n      <Navbar />\n      <div style={contentStyle}>\n        { children }\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nconst commentStyle = {\n  marginBottom: '2em'\n};\n\nconst titleStyle = {\n  fontSize: '1.625rem',\n  fontWeight: 500,\n  marginBottom: '0.75rem'\n};\n\nconst contentStyle = {\n  marginTop: '0.75rem'\n};\n\nexport default function Comment (props) {\n  return (\n    <div style={commentStyle}>\n      <h2 style={titleStyle}>{props.index}. {props.title}</h2>\n      <div style={contentStyle}>\n        <ReactMarkdown source={props.content} skipHtml />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { split } from 'sentence-splitter';\n\nimport Comment from './comment';\n\nconst postStyle = {\n  marginBottom: '2.5em',\n  borderBottom: '2px solid #e1e4e8'\n};\n\nconst titleStyle = {\n  fontSize: '2.5rem',\n  marginBottom: '0.5em',\n  lineHeight: 1.25,\n  fontWeight: 600\n};\n\nexport default function Post (props) {\n  return (\n    <div style={postStyle}>\n      <h1 style={titleStyle}>\n        {props.title}\n      </h1>\n      <div>\n        {\n          props.content.map(processComment).map((value, index) =>\n            <Comment\n              key={value[0].replace(' ', '-').trim()}\n              index={index + 1}\n              title={value[0]}\n              content={value[1]}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction processComment (content) {\n  const splitContent = split(content)[0];\n  // Get first sentence and make sure first letter is uppercase\n  const commentTitle = (splitContent.raw.charAt(0).toUpperCase() + splitContent.raw.slice(1));\n  const commentContent = content.substring(splitContent.range[1]);\n  return [commentTitle, commentContent];\n}\n","import React from 'react';\n\nexport default function Error (props) {\n  return (\n    <p>Error: {props.message}</p>\n  );\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Page from '../layouts/main';\n\nimport Post from '../components/post';\nimport Error from '../components/error';\n\n/**\n * The way this works is:\n * - First load (Server Rendering) saves everything to props\n *  (so that it doesn't have to derive state from props)\n * - Any other load after that saves to state\n */\n\n/**\n * 1. Send request to API with a list of IDs that it has loaded so far\n * - Server pulls random post from DB\n * - if post id is in array, pull next random post\n * - if post id is not in array, serve this post\n * 2. Server responds with a key/value pair of Ids/Posts\n * 3. SetState to keep track of all the IDs that were loaded.\n * 4. Repeat on Scroll\n */\n\nexport default class Index extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      hasMore: true,\n      used: [],\n      posts: [],\n      loading: true\n    };\n\n    window.onscroll = async () => {\n      if (\n        window.innerHeight + document.documentElement.scrollTop >=\n        document.documentElement.offsetHeight - 150 &&\n        !this.state.loading\n      ) {\n        this.setState({ loading: true });\n        await this.loadMoreData();\n        this.setState({ loading: false });\n      }\n    };\n\n    this.loadMoreData = this.loadMoreData.bind(this);\n  }\n\n  async componentWillMount () {\n    const id = 'b4jn8z';\n    await this.loadMoreData(id);\n  }\n\n  // This loads data from the API and sets it to the state (using this.loadData)\n  async loadMoreData (id) {\n    let newPosts;\n    if (id) {\n      const { data } = await axios.get('http://35.247.79.142/api/' + id);\n      newPosts = { id: data[0], title: data[1], content: data[2] };\n    } else {\n      const { data } = await axios.post('http://35.247.79.142/api', { 'used': this.state.posts.map(post => post.id) });\n      newPosts = { id: data[0], title: data[1], content: data[2] };\n    }\n\n    /**\n     * 1. Fetch data from API\n     * 2. Set State with new posts list (merge/push them to the current posts list)\n     * 3. Also SetState with whether or not it hasMore posts to load (if new posts list is empty, false)\n     * 4. This causes a re-render\n     */\n\n    // TODO: Pass Object.keys(posts) (to pass currently loaded posts)\n    // Load data from the API\n    this.setState(previousState => ({\n      // Merge current and new posts\n      posts: previousState.posts.concat(newPosts),\n      // Update whether or not it has more posts\n      hasMore: newPosts.length !== 0,\n      // Tell React that it's ready to render\n      loading: false\n    }));\n  }\n\n  render () {\n    // Merge props and state to render it\n    const { loading, posts } = this.state;\n    return (\n      <Page>\n        {\n          posts && posts.length > 0\n            ? (\n              <div id='posts'>\n                {\n                  posts.map((post) => (\n                    <Post\n                      title={processTitle(post.title)}\n                      content={post.content}\n                      key={post.id}\n                    />\n                  ))\n                }\n              </div>\n            )\n            : (\n              loading ? <p>Loading...</p>\n                : <Error message='Could not load posts, please try again.' />\n            )\n\n        }\n      </Page>\n    );\n  }\n}\n\nfunction processTitle (rawTitle) {\n  const regexp = /(.*)( of [Rr]eddit[:,] ?)/;\n  const matches = regexp.exec(rawTitle);\n\n  let finalTitle = rawTitle;\n\n  if (matches && matches.length > 0) {\n    finalTitle = finalTitle\n      .replace(regexp, '')\n      .replace('you', matches[1].toLowerCase())\n      .trim();\n  }\n\n  return (finalTitle.charAt(0).toUpperCase() + finalTitle.slice(1)).trim();\n}\n","import React, { Component } from 'react';\n\nimport Home from './pages/index';\n\nclass App extends Component {\n  render () {\n    return (\n      <div className='App'>\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}